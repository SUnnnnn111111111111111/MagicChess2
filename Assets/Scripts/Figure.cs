using UnityEngine;
using System.Collections.Generic;
using System;

public class Figure : MonoBehaviour
{
    public NeighborSelectionSettings neighborSelectionSettings;
    private Tile currentTile;

    private void Start()
    {
        // –î–∞–µ–º –≤—Ä–µ–º—è BoardManager –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º
        Invoke(nameof(LateStart), 0.1f);
    }

    private void LateStart()
    {
        currentTile = BoardManager.Instance.GetTileAt(new Vector2Int((int)transform.position.x, (int)transform.position.z));

        if (currentTile != null)
        {
            currentTile.SetOccupied(true);
            Debug.Log($"‚úÖ –§–∏–≥—É—Ä–∞ {gameObject.name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –∫–ª–µ—Ç–∫–µ {currentTile.Position}");
        }
        else
        {
            Debug.LogWarning($"‚ö†Ô∏è –§–∏–≥—É—Ä–∞ {gameObject.name} –Ω–µ –Ω–∞—à–ª–∞ —Å–≤–æ—é —Ç–µ–∫—É—â—É—é –∫–ª–µ—Ç–∫—É!");
        }
    }

    public void HighlightAvailableMoves()
{
    if (currentTile == null)
    {
        Debug.LogWarning($"‚ö†Ô∏è –§–∏–≥—É—Ä–∞ {gameObject.name} –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â—É—é –∫–ª–µ—Ç–∫—É, —Ö–æ–¥—ã –Ω–µ –ø—Ä–æ—Å—á–∏—Ç–∞–Ω—ã!");
        return;
    }

    List<Tile> availableMoves = new List<Tile>();
    List<Tile> possibleMoves = currentTile.GetNeighbors(neighborSelectionSettings);

    Debug.Log($"üîç –§–∏–≥—É—Ä–∞ {gameObject.name} –Ω–∞—à–ª–∞ {possibleMoves.Count} –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤.");

    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤
    foreach (var tile in possibleMoves)
    {
        Debug.Log($"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–µ—Ç–∫–∏ {tile.Position} –¥–ª—è {gameObject.name}. –ó–∞–Ω—è—Ç–∞: {tile.IsOccupied}, –ü–æ–¥—Å–≤–µ—á–µ–Ω–∞: {tile.IsHighlighted}");
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–æ–≤ –¥–ª—è –ø–µ—à–∫–∏
    if (neighborSelectionSettings.neighborRules.Exists(rule => rule.neighborType == NeighborType.WhitePawn || rule.neighborType == NeighborType.BlackPawn))
    {
        foreach (var tile in possibleMoves)
        {
            // –ü–µ—à–∫–∞ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏ –≤–ø–µ—Ä–µ–¥
            if (!tile.IsOccupied)
            {
                availableMoves.Add(tile);
                Debug.Log($"‚úÖ –ö–ª–µ—Ç–∫–∞ {tile.Position} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ –¥–ª—è –ø–µ—à–∫–∏.");
            }
        }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–æ–≤ –¥–ª—è –∫–æ–Ω—è
    else if (neighborSelectionSettings.neighborRules.Exists(rule => rule.neighborType == NeighborType.KnightMove))
    {
        foreach (var tile in possibleMoves)
        {
            // –ö–æ–Ω—å –º–æ–∂–µ—Ç —Ö–æ–¥–∏—Ç—å –Ω–∞ –ª—é–±—É—é –∫–ª–µ—Ç–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∑–∞–Ω—è—Ç–∞
            if (!tile.IsOccupied)
            {
                availableMoves.Add(tile);
                Debug.Log($"‚úÖ –ö–ª–µ—Ç–∫–∞ {tile.Position} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ –¥–ª—è –∫–æ–Ω—è.");
            }
        }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–æ–≤ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–∏–≥—É—Ä
    else
    {
        Dictionary<Vector2Int, List<Tile>> directionalMoves = new Dictionary<Vector2Int, List<Tile>>();

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–ª–µ—Ç–∫–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
        foreach (var offset in neighborSelectionSettings.GetOffsets())
        {
            directionalMoves[offset] = new List<Tile>();
        }

        foreach (var tile in possibleMoves)
        {
            Vector2Int direction = GetDirection(tile.Position, currentTile.Position);
            if (directionalMoves.ContainsKey(direction))
            {
                directionalMoves[direction].Add(tile);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–µ—Ç–∫–∏ –≤ –∫–∞–∂–¥–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        foreach (var entry in directionalMoves)
        {
            bool foundObstacle = false;
            foreach (var tile in entry.Value)
            {
                if (foundObstacle)
                {
                    Debug.Log($"üöß –ü—Ä–µ–≥—Ä–∞–¥–∞ –Ω–∞–π–¥–µ–Ω–∞, –∫–ª–µ—Ç–∫–∞ {tile.Position} –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è.");
                    break;
                }

                if (tile.IsOccupied)
                {
                    foundObstacle = true;
                    Debug.Log($"üöß –ö–ª–µ—Ç–∫–∞ {tile.Position} –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–æ–π —Ñ–∏–≥—É—Ä–æ–π.");
                }
                else
                {
                    Debug.Log($"üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–µ—Ç–∫–∏ {tile.Position} –¥–ª—è {gameObject.name}. –ó–∞–Ω—è—Ç–∞: {tile.IsOccupied}, –ü–æ–¥—Å–≤–µ—á–µ–Ω–∞: {tile.IsHighlighted}");
                    availableMoves.Add(tile);
                    Debug.Log($"‚úÖ –ö–ª–µ—Ç–∫–∞ {tile.Position} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤.");
                }
            }
        }
    }

    Debug.Log($"‚ú® –§–∏–≥—É—Ä–∞ {gameObject.name} –ø–æ–¥—Å–≤–µ—Ç–∏–ª–∞ {availableMoves.Count} –∫–ª–µ—Ç–æ–∫.");
    HighlightController.Instance.HighlightTiles(availableMoves);
}

    private Vector2Int GetDirection(Vector2Int from, Vector2Int to)
    {
        Vector2Int diff = to - from;
        return new Vector2Int(
            diff.x == 0 ? 0 : diff.x / Mathf.Abs(diff.x), 
            diff.y == 0 ? 0 : diff.y / Mathf.Abs(diff.y)
        );
    }

    public void MoveToTile(Tile targetTile)
    {
        if (targetTile == null)
        {
            Debug.LogWarning($"‚ö†Ô∏è –§–∏–≥—É—Ä–∞ {gameObject.name} –Ω–µ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è: —Ü–µ–ª—å null!");
            return;
        }
        
        if (targetTile.IsOccupied)
        {
            Debug.LogWarning($"‚ö†Ô∏è –§–∏–≥—É—Ä–∞ {gameObject.name} –Ω–µ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è: –∫–ª–µ—Ç–∫–∞ {targetTile.Position} –∑–∞–Ω—è—Ç–∞!");
            return;
        }

        if (!targetTile.IsHighlighted)
        {
            Debug.LogWarning($"‚ö†Ô∏è –§–∏–≥—É—Ä–∞ {gameObject.name} –Ω–µ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è: –∫–ª–µ—Ç–∫–∞ {targetTile.Position} –Ω–µ –ø–æ–¥—Å–≤–µ—á–µ–Ω–∞!");
            return;
        }

        Debug.Log($"üîÑ –§–∏–≥—É—Ä–∞ {gameObject.name} –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ –∫–ª–µ—Ç–∫—É {targetTile.Position}.");

        currentTile.SetOccupied(false);
        transform.position = targetTile.transform.position;
        currentTile = targetTile;
        currentTile.SetOccupied(true);

        Debug.Log($"‚úÖ –§–∏–≥—É—Ä–∞ {gameObject.name} –∑–∞–≤–µ—Ä—à–∏–ª–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ.");

        HighlightController.Instance.ClearHighlights();
        GameManager.Instance.SelectedFigure = null;
    }
}

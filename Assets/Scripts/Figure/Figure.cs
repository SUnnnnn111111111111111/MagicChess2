using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

public class Figure : MonoBehaviour
{
    public bool whiteTeamAffiliation; 
    public NeighborSelectionSettings neighborSelectionSettings; 
    
    [Header("Death Animation")]
    [SerializeField] private GameObject deathAnimationObject; 
    [SerializeField] private float deathDelay = 1.0f; 
    
    private Tile currentTile; 

    private void Start()
    {
        Invoke(nameof(LateStart), 0.1f);
    }

    private void LateStart()
    {
        currentTile = BoardManager.Instance.GetTileAt(new Vector2Int((int)transform.position.x, (int)transform.position.z));

        if (currentTile != null)
        {
            currentTile.SetOccupyingFigure(this);
            // Debug.Log($"‚úÖ –§–∏–≥—É—Ä–∞ {gameObject.name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –∫–ª–µ—Ç–∫–µ {currentTile.Position}");
        }
        else
        {
            Debug.LogWarning($"‚ö†Ô∏è –§–∏–≥—É—Ä–∞ {gameObject.name} –Ω–µ –Ω–∞—à–ª–∞ —Å–≤–æ—é —Ç–µ–∫—É—â—É—é –∫–ª–µ—Ç–∫—É!");
        }
    }
    
    public void HighlightAvailableToMoveTiles()
    {
        if (currentTile == null)
        {
            Debug.LogWarning($"‚ö†Ô∏è –§–∏–≥—É—Ä–∞ {gameObject.name} –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â—É—é –∫–ª–µ—Ç–∫—É, —Ö–æ–¥—ã –Ω–µ –ø—Ä–æ—Å—á–∏—Ç–∞–Ω—ã!");
            return;
        }

        MoveCalculator moveCalculator = GetMoveCalculator();
        List<Tile> moves = moveCalculator.CalculateMoves(currentTile, neighborSelectionSettings, whiteTeamAffiliation);

        List<Tile> emptyTiles = moves.Where(tile => tile.OccupyingFigure == null).ToList();
        List<Tile> enemyTiles = moves.Where(tile => tile.OccupyingFigure != null && tile.OccupyingFigure.whiteTeamAffiliation != whiteTeamAffiliation).ToList();

        HighlightTilesController.Instance.HighlightAvailableTiles(emptyTiles);
        HighlightTilesController.Instance.HighlightEnemyTiles(enemyTiles);
    }
    
    
    private MoveCalculator GetMoveCalculator()
    {
        if (neighborSelectionSettings.neighborRules.Exists(rule => rule.neighborType == NeighborType.WhitePawn || rule.neighborType == NeighborType.BlackPawn))
        {
            return new PawnMoveCalculator();
        }
        else if (neighborSelectionSettings.neighborRules.Exists(rule => rule.neighborType == NeighborType.KnightMove))
        {
            return new KnightMoveCalculator();
        }
        else
        {
            return new DefaultMoveCalculator(); 
        }
    }
    
    public void MoveToTile(Tile targetTile)
    {
        if (targetTile == null)
        {
            return;
        }

        if (targetTile.OccupyingFigure != null && targetTile.OccupyingFigure.whiteTeamAffiliation == whiteTeamAffiliation)
        {
            return;
        }

        if (!targetTile.IsHighlighted)
        {
            return;
        }

        Debug.Log($"üîÑ –§–∏–≥—É—Ä–∞ {gameObject.name} –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ –∫–ª–µ—Ç–∫—É {targetTile.Position}.");
        
        if (targetTile.OccupyingFigure != null && targetTile.OccupyingFigure.whiteTeamAffiliation != whiteTeamAffiliation)
        {
            Debug.Log($"‚úÖ –§–∏–≥—É—Ä–∞ {targetTile.OccupyingFigure.name} –∞—Ç–∞–∫–æ–≤–∞–Ω–∞.");
            StartCoroutine(DestroyEnemyFigure(targetTile.OccupyingFigure, targetTile.transform.position)); 
        }

        currentTile.SetOccupyingFigure(null);

        transform.position = targetTile.transform.position;
        currentTile = targetTile;
        currentTile.SetOccupyingFigure(this);

        Debug.Log($"‚úÖ –§–∏–≥—É—Ä–∞ {gameObject.name} –∑–∞–≤–µ—Ä—à–∏–ª–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ.");

        HighlightTilesController.Instance.ClearHighlights();
        GameManager.Instance.SelectedFigure = null;
    }
    
    private IEnumerator DestroyEnemyFigure(Figure enemyFigure, Vector3 deathPosition)
    {
        if (deathAnimationObject != null)
        {
            Debug.Log($"‚úÖ –§–∏–≥—É—Ä–∞ {enemyFigure.gameObject.name} –∑–∞–ø—É—Å—Ç–∏–ª–∞ –∞–Ω–∏–º–∞—Ü–∏—é —Å–º–µ—Ä—Ç–∏.");
            enemyFigure.deathAnimationObject.SetActive(true);
        }
        
        yield return new WaitForSeconds(deathDelay);
        
        if (enemyFigure != null)
        {
            Destroy(enemyFigure.gameObject);
            Debug.Log($"‚úÖ –§–∏–≥—É—Ä–∞ {enemyFigure.gameObject.name} —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞.");
        }
    }
    
    public string GetCurrentTilePosition()
    {
        return currentTile != null ? currentTile.Position.ToString() : "None";
    }

    public int GetAvailableMovesCount()
    {
        if (currentTile == null) return 0;
    
        MoveCalculator moveCalculator = GetMoveCalculator();
        return moveCalculator.CalculateMoves(currentTile, neighborSelectionSettings, whiteTeamAffiliation).Count;
    }

    public bool IsHighlighted()
    {
        return currentTile != null && currentTile.IsHighlighted;
    }
}